package bot

import (
	"fmt"
	"strconv"
	"strings"
	"telegram_bot_service/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
)

func (b *Bot) handleListingsCommand(chatID int64) {
	listings, err := b.cianService.GetListings(false)
	if err != nil {
		logrus.WithError(err).Error("Failed to get listings")
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	if len(listings) == 0 {
		b.sendMessage(chatID, "üì≠ –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	// Send listings with pagination
	b.sendListingsPage(chatID, listings, 0)
}

func (b *Bot) sendListingsPage(chatID int64, listings []models.Listing, page int) {
	pageSize := 5
	totalPages := (len(listings) + pageSize - 1) / pageSize

	if page < 0 || page >= totalPages {
		return
	}

	start := page * pageSize
	end := start + pageSize
	if end > len(listings) {
		end = len(listings)
	}

	var message strings.Builder
	message.WriteString(fmt.Sprintf("üè† *–û–±—ä—è–≤–ª–µ–Ω–∏—è (%d-%d –∏–∑ %d)*\n\n", start+1, end, len(listings)))

	for i := start; i < end; i++ {
		listing := listings[i]
		message.WriteString(b.formatListingForDisplay(&listing))
		message.WriteString("\n---\n\n")
	}

	// Create keyboard with navigation and favorite buttons
	keyboard := b.createListingsKeyboard(listings[start:end], page, totalPages)

	msg := tgbotapi.NewMessage(chatID, message.String())
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = keyboard

	if _, err := b.api.Send(msg); err != nil {
		logrus.WithError(err).Error("Failed to send listings")
	}
}

func (b *Bot) handleFavoritesCommand(chatID int64, userID int64) {
	favorites, err := b.favoriteService.GetUserFavorites(userID)
	if err != nil {
		logrus.WithError(err).Error("Failed to get favorites")
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
		return
	}

	if len(favorites) == 0 {
		b.sendMessage(chatID, "‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
		return
	}

	var message strings.Builder
	message.WriteString(fmt.Sprintf("‚≠ê *–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (%d)*\n\n", len(favorites)))

	for i, favorite := range favorites {
		message.WriteString(fmt.Sprintf("*%d.* [%s](%s)\n", i+1, favorite.Title, favorite.URL))
		message.WriteString(fmt.Sprintf("üí∞ %s\n", favorite.Price))
		if favorite.Note != "" {
			message.WriteString(fmt.Sprintf("üìù *–ó–∞–º–µ—Ç–∫–∞:* %s\n", favorite.Note))
		}
		message.WriteString(fmt.Sprintf("üïí –î–æ–±–∞–≤–ª–µ–Ω–æ: %s\n\n", favorite.CreatedAt.Format("02.01.2006 15:04")))
	}

	// Create keyboard for managing favorites
	keyboard := b.createFavoritesKeyboard(favorites)

	msg := tgbotapi.NewMessage(chatID, message.String())
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = keyboard
	msg.DisableWebPagePreview = true

	if _, err := b.api.Send(msg); err != nil {
		logrus.WithError(err).Error("Failed to send favorites")
	}
}

func (b *Bot) handleSettingsCommand(chatID int64) {
	settings, err := b.cianService.GetSettings()
	if err != nil {
		logrus.WithError(err).Error("Failed to get settings")
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
		return
	}

	var message strings.Builder
	message.WriteString("‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:*\n\n")

	for key, value := range settings {
		message.WriteString(fmt.Sprintf("‚Ä¢ *%s:* %v\n", key, value))
	}

	message.WriteString("\nüí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

	b.sendMessage(chatID, message.String())
}

func (b *Bot) handleSubscribeCommand(chatID int64, userID int64) {
	// TODO: Implement subscription logic
	b.sendMessage(chatID, "üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.")
}

func (b *Bot) handleUnsubscribeCommand(chatID int64, userID int64) {
	// TODO: Implement unsubscription logic
	b.sendMessage(chatID, "üîï –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
}

func (b *Bot) handleTextMessage(message *tgbotapi.Message) {
	// Handle non-command text messages
	chatID := message.Chat.ID
	b.sendMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
}

func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID
	data := query.CallbackData

	// Acknowledge the callback query
	callback := tgbotapi.NewCallback(query.ID, "")
	if _, err := b.api.Request(callback); err != nil {
		logrus.WithError(err).Error("Failed to acknowledge callback query")
	}

	parts := strings.Split(data, ":")
	if len(parts) < 2 {
		// Handle single action callbacks
		switch data {
		case "refresh_listings":
			b.handleRefreshListings(chatID)
		case "back_to_listings":
			b.handleListingsCommand(chatID)
		}
		return
	}

	action := parts[0]
	param := parts[1]

	switch action {
	case "fav_add":
		b.handleAddToFavorites(chatID, userID, param)
	case "fav_remove":
		b.handleRemoveFromFavorites(chatID, userID, param)
	case "listings_page":
		if page, err := strconv.Atoi(param); err == nil {
			// Get fresh listings and show page
			if listings, err := b.cianService.GetListings(false); err == nil {
				b.sendListingsPage(chatID, listings, page)
			}
		}
	}
}

func (b *Bot) handleAddToFavorites(chatID int64, userID int64, listingID string) {
	// Get listing details from CIAN API
	listings, err := b.cianService.GetListings(false)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
		return
	}

	var targetListing *models.Listing
	for _, listing := range listings {
		if listing.ID == listingID {
			targetListing = &listing
			break
		}
	}

	if targetListing == nil {
		b.sendMessage(chatID, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
		return
	}

	_, err = b.favoriteService.AddToFavorites(userID, targetListing, "")
	if err != nil {
		logrus.WithError(err).Error("Failed to add to favorites")
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
		return
	}

	b.sendMessage(chatID, fmt.Sprintf("‚≠ê –û–±—ä—è–≤–ª–µ–Ω–∏–µ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", targetListing.Title))
}

func (b *Bot) handleRemoveFromFavorites(chatID int64, userID int64, listingID string) {
	err := b.favoriteService.RemoveFromFavorites(userID, listingID)
	if err != nil {
		logrus.WithError(err).Error("Failed to remove from favorites")
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
		return
	}

	b.sendMessage(chatID, "üóëÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
}

func (b *Bot) handleRefreshListings(chatID int64) {
	listings, err := b.cianService.GetListings(true) // Force refresh
	if err != nil {
		logrus.WithError(err).Error("Failed to refresh listings")
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
		return
	}

	if len(listings) == 0 {
		b.sendMessage(chatID, "üì≠ –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	b.sendMessage(chatID, "üîÑ –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
	b.sendListingsPage(chatID, listings, 0)
}
